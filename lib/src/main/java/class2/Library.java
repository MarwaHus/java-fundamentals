/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package class2;
import java.util.*;

public class Library {
    public static int[] roll(int n) {
        if (n <= 0) {
            return new int[0];
        }
        int[] rolls = new int[n];
        for (int i = 0; i < n; i++) {
            rolls[i] = (int) (Math.random() * 6) + 1;
        }
        System.out.println(Arrays.toString(rolls));
        return rolls;
    }
    public static boolean containsduplicates(int[] arr) {
        Arrays.sort(arr);
        for (int i = 0; i < arr.length - 1; i++) {
            if (arr[i] == arr[i+1]) {
                return true;
            }
        }
        return false;
    }
    public static double calculateAverage(int[] arr) {
        int sum = 0;
        for (int i = 0; i < arr.length; i++) {
            sum += arr[i];
        }
        double average = (double)sum / arr.length;
        return average;
    }
    public static int[] getLowestAverageArray(int[][] arr) {
        int[] lowestAverageArray = null;
        double lowestAverage = Double.MAX_VALUE;
        for (int[] innerArray : arr) {
            int sum = 0;
            for (int num : innerArray) {
                sum += num;
            }
            double average = (double) sum / innerArray.length;
            if (average < lowestAverage) {
                lowestAverage = average;
                lowestAverageArray = innerArray;
            }}
        return lowestAverageArray;
    }
    public static String analyze(int[][] data) {
        int minTemp = 999;
        int maxTemp = -999;
        HashSet<Integer> uniqueTemps = new HashSet<>();
        for (int[] row : data) {
            for (int temp : row) {
                if (temp < minTemp) {
                    minTemp = temp;
                }
                if (temp > maxTemp) {
                    maxTemp = temp;
                }
                uniqueTemps.add(temp);
            }
        }
        StringBuilder sb = new StringBuilder();
        for (int temp = minTemp; temp <= maxTemp; temp++) {
            if (!uniqueTemps.contains(temp)) {
                sb.append("Never saw temperature: ").append(temp).append("\n");
            }
        }
        System.out.println( "High: " + maxTemp + "\nLow: " + minTemp + "\n" + sb.toString());
        return "High: " + maxTemp + "\nLow: " + minTemp + "\n" + sb.toString();
    }
    public static String tally(List<String> votes) {
        HashMap<String, Integer> voteCount = new HashMap<>();
        for (String candidate : votes) {
            if (voteCount.containsKey(candidate)) {
                int count = voteCount.get(candidate);
                voteCount.put(candidate, count + 1);
            } else {
                voteCount.put(candidate, 1);
            }
        }
        int maxVotes = 0;
        String winner = "";
        for (String candidate : voteCount.keySet()) {
            int votesReceived = voteCount.get(candidate);
            if (votesReceived > maxVotes) {
                maxVotes = votesReceived;
                winner = candidate;
            }
        }
        System.out.println(winner);
        return winner;
    }
}
